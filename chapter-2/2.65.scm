(load "set-binary-tree.scm")
(load "2.63.scm")
(load "2.64.scm")

(define (splice list1 list2)
  (cond ((null? list1) list2)
		((null? list2) list1)
		((< (car list1) (car list2))
		 (cons (car list1) (splice (cdr list1) list2)))
		((< (car list2) (car list1))
		 (cons (car list2) (splice list1 (cdr list2))))
		((= (car list1) (car list2))
		 (cons (car list1) (splice (cdr list1) (cdr list2))))))

(define (find-common list1 list2)
  (cond ((or (null? list1) (null? list2)) '())
		((< (car list1) (car list2)) (find-common (cdr list1) list2))
		((> (car list1) (car list2)) (find-common list1 (cdr list2)))
		((= (car list1) (car list2)) (cons (car list1)
										   (find-common (cdr list1)
														(cdr list2))))))

(define (union-set set1 set2)
  (list->tree (splice (tree->list-2 set1)
					  (tree->list-2 set2))))

(define (intersection-set set1 set2)
  (list->tree (find-common (tree->list-2 set1)
						   (tree->list-2 set2))))
